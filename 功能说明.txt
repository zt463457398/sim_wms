WMS系统功能说明与学习指南
==========================

系统概述
-------------
WMS系统由前端项目wms-web和后端项目wms-api组成。前端使用Vue.js构建用户界面，后端使用Spring Boot提供RESTful API服务。系统主要功能包括用户管理、个人中心、用户认证等。

技术栈
-------------
- 前端：Vue.js, Vue Router, Axios, Element Plus
- 后端：Spring Boot, MyBatis-Plus, JWT
- 数据库：MySQL
- 构建工具：Maven

前端项目 (wms-web)
-------------------
1. 目录结构
   - src/api/user.js: 定义用户相关的API请求方法。
   - src/views/profile/index.vue: 个人中心页面组件，提供用户信息查看和编辑功能。
   - src/router/router.js: 定义应用的路由配置。

2. 主要功能
   - 个人中心：用户可以查看和编辑个人信息，包括用户名、昵称、电话、邮箱。
   - 用户认证：通过JWT进行用户身份验证。

3. 组件与API调用关系
   - 个人中心页面 (index.vue) 调用 `getUserInfo` 和 `updateUserInfo` 方法从后端获取和更新用户信息。
   - API请求通过 `user.js` 中的 `request` 方法发送到后端。

4. 开发步骤
   - 安装依赖：`npm install`
   - 启动开发服务器：`npm run serve`
   - 构建生产版本：`npm run build`

后端项目 (wms-api)
-------------------
1. 目录结构
   - controller/UserController.java: 提供用户相关的RESTful API接口。
   - service/UserService.java: 定义用户服务接口。
   - service/impl/UserServiceImpl.java: 实现用户服务接口的具体逻辑。
   - util/SecurityUtils.java: 提供安全相关的工具方法。
   - util/JwtUtil.java: 提供JWT生成和解析功能。

2. 主要功能
   - 用户信息管理：提供获取和更新用户信息的API接口。
   - 用户认证：通过JWT进行用户身份验证。
   - 密码管理：提供用户密码加密和验证功能。

3. 文件与方法调用关系
   - `UserController` 调用 `UserService` 中的方法处理用户信息的获取和更新。
   - `UserServiceImpl` 实现 `UserService` 接口，使用 `UserMapper` 进行数据库操作。
   - `SecurityUtils` 从请求中提取JWT token，并使用 `JwtUtil` 解析用户ID。
   - `JwtUtil` 提供生成和解析JWT token的方法，确保用户身份的安全验证。

4. 开发步骤
   - 配置数据库连接：在 `application.properties` 中设置数据库连接信息。
   - 启动应用：运行 `WmsApiApplication` 的 `main` 方法。
   - 构建项目：`mvn clean install`

功能流程
-------------
1. 用户登录
   - 用户通过前端登录界面输入用户名和密码。
   - 前端调用后端的登录接口，后端验证用户信息并返回JWT token。
   - 前端将token存储在本地，并在后续请求中附带token进行身份验证。

2. 查看个人信息
   - 用户访问个人中心页面，前端调用 `getUserInfo` API。
   - 后端通过 `SecurityUtils` 获取当前用户ID，并从数据库中查询用户信息返回给前端。

3. 更新个人信息
   - 用户在个人中心页面编辑信息并提交。
   - 前端调用 `updateUserInfo` API，后端验证并更新用户信息。

安全性考虑
-------------
- 所有API请求都需要携带JWT token进行身份验证。
- 用户只能查看和修改自己的信息，后端通过token验证用户身份。
- 密码在存储前进行加密，确保用户数据安全。

注意事项
-------------
- 确保后端API正确实现并可访问。
- 前端请求头需要携带有效的token。
- 表单验证规则可根据实际需求调整。

部署指南
-------------
1. 前端部署
   - 构建生产版本：`npm run build`
   - 将生成的 `dist` 文件夹部署到Web服务器（如Nginx）

2. 后端部署
   - 打包项目：`mvn package`
   - 将生成的 `jar` 文件部署到服务器并运行：`java -jar wms-api.jar`

学习资源
-------------
- Vue.js 官方文档: https://vuejs.org/v2/guide/
- Spring Boot 官方文档: https://spring.io/projects/spring-boot
- MyBatis-Plus 官方文档: https://mp.baomidou.com/
- JWT 官方文档: https://jwt.io/introduction/

</rewritten_file> 